rep(12, 5)
# Repita casa 2 veces
rep("casa", 2)
# Repite el 12 cinco veces
rep(12, 5)
# Repita casa 2 veces
rep("casa", 2)
# Repite la secuencia del 1 al 5 3 veces
rep(1:5, 3)
# Asignandole 1 a la variable a
a<-1
# Imprimir a
print(a) # o simplemente a
# Imprimir un numero con un caracter
print(paste("Cantidad de personas:", a))
# Repite el 12 cinco veces
rep(12, 5)
# Repita casa 2 veces
rep("casa", 2)
# Repite la secuencia del 1 al 5 3 veces
rep(1:5, 3)
#
vec_num <- c(1,2,3,4,5,6, "control")
paste("Tesis", vec_num)
v5<-c(2,4,6,8)
v6<-c(1,3,5,7)
# 1.
v5*2
v6+2
# 2.
v6==3
# 3. Devuelve las posiciones de los valores que estan por sobre la media de v6
which (v6>=(mean(v6)))
# 4. Devuelve los valores que estan por sobre la media de v6
mayor_media <- which (v6>=(mean(v6)))
v6[mayor_media]
# 5. Reemplaza un valor en el vector (el 8 por el 234)
v5[4] = 234
v5
# 6. Repite tesis y agrega elementos de v6
paste("Tesis", v6)
# Asignandole 1 a la variable a
a<-1
# Imprimir a
print(a) # o simplemente a
# Imprimir un numero con un caracter usando paste
print(paste("Cantidad de personas:", a))
library(stats)
3*5+2
234 > 243
"manzana" == "MANZANA"
edad <- c(12, 35, 46, 2)
edad > 20
# Al usar &, si uno de los valores es FALSE, devuelve FALSE
# Como 234 es menor que 243, devuelve FALSE
234 & 2000 > 243
# Al usar |, si uno de los valores es TRUE, devuelve TRUE
# Como 2000 es mayor que 243, devuelve TRUE
234 | 2000 > 243
# Creando un numero complejo
z_1 <- complex(real=14, imaginary=7)
z_1
typeof(1.5)
# Convirtiendo la variable b en una cadena de texto
b<-456 # integer
b<-as.character(b)
typeof(b)
# Como b es un texto, devuelve el resultado entre comillas
b
c <- "abuela"
c <- as.integer(c)
# Verificando si 432 es una cadena de texto.
is.character(432)
# El siguiente codigo imprimira en pantalla Par si el modulo entre el numero y 2 es cero, o impar si no lo es
n <- 1:6
ifelse(n%%2==0,"Par", "Impar")
dado<-1:6
for (cara in dado){
d<-dado^2
}
d
num <- 1
while (num <10){
print(num^2)
num <- num+1
}
auto <- 1
while (auto <10){
print(paste("El numero de autos es", auto))
auto <- auto + 1
}
auto <- 1
bus <- 1
while (num <10){
# Detiene el while cuando la suma de auto y bus es 8
if(auto + bus == 8){
break
}
print(paste("El numero de autos es", auto))
print(paste("El numero de buses es", bus))
bus <- bus + 1
auto <- auto + 1
}
valor<-0
repeat{
valor<-valor+1
if (valor ==5){
break
}
}
# Imprime el resultado
valor
lista <- list(pop = 1868,
numeros = c(1,2,4,6,32,575,121,5))
# lapply
lapply(lista, class)
# lapply
nombres <- c("Roberto", " Marta", "Matias", "Ignacio")
# devuelve el numero de letras de cada nombre
lapply(nombres, nchar)
# Creando un dataframe
df_ejemplo <- data.frame(
col_1 = c(1, 2, 3),
col_2 = c(4, 5, 6),
col_3 = c(7, 8, 9)
)
# Aplicando el promedio (mean) a cada columna del dataframe
medias <- lapply(df_ejemplo, mean)
medias
unlist(lapply(nombres, nchar))
sapply(nombres, nchar)
# Creando un vector numerico
v1<-c(1,2,3,4,5,6,7)
v1
# Vector numerico del 2 al 20
v2<-c(2:20)
v2
# Creando un vector de caracteres
v3 <- c("r", "a", "j")
v3
# Creando un vector logico
v4 <- c(TRUE, FALSE, FALSE, TRUE)
v4
# Vector
x<-c(3,4,5,4,3,2)
x
# Verifica si un vector es vector. Si es vector, devuelve TRUE
is.vector(x)
# Imprime el largo del vector
length(x)
# Imprime el tipo de vector
typeof(x)
# Imprime el tipo de dato
class(x)
# Nombra los elementos de un vector
names(x)<-c("a","b","c","d","e","f")
x
v5<-c(2,4,6,8)
v6<-c(1,3,5,7)
# 1.
v5*2
v6+2
# 2.
v6==3
# 3. Devuelve las posiciones de los valores que estan por sobre la media de v6
which (v6>=(mean(v6)))
# 4. Devuelve los valores que estan por sobre la media de v6
mayor_media <- which (v6>=(mean(v6)))
v6[mayor_media]
# 5. Reemplaza un valor en el vector (el 8 por el 234)
v5[4] = 234
v5
# 6. Repite tesis y agrega elementos de v6
paste("Tesis", v6)
v5
# Imprime el valor de la posicion 4 del vector v3
v5[c(4)] # o v5[4]
# Entrega un rango de valores del vector v3
v5[1:3]
# Elimina el valor de la posicion 1 (elimina el 2)
v5[-1]
# Elimina un rango de valores (elimina el 4 y 6)
v5[-1:-3]
# Sucesion que inicia en 1 y va de 2 en 2 hasta 20
seq(1,20,by=2)
# Sucesion que inicia en 3 y termina en 16
seq(3:16)
# Repite el 12 cinco veces
rep(12, 5)
# Repita casa 2 veces
rep("casa", 2)
# Repite la secuencia del 1 al 5 3 veces
rep(1:5, 3)
# Comprueba si todos los elementos son mayores a 5
y<-1:20
all(y>5)
# Comprueba si hay al menos un elemento menor a 5
x<-1:10
any(x<5)
# Creando una matriz de datos NA
z<-matrix(nrow=4,ncol=3)
z
z1<-matrix(1:6, nrow=2, ncol=3)
z1
# Vectores
vec1 <- 1:4
vec2 <- 5:8
# cbind usa cada vector como una columna
vec3 <- cbind(vec1, vec2)
vec3
# rbind usa cada vector como una fila
vec3 <- rbind(vec1, vec2)
vec3
rownames(z1) <- c("Fila_1", "Fila_2")
z1
colnames(z1) <- c("Col_1", "Col_2", "Col_3")
z1
m <- matrix(1:12, nrow=3, ncol=4)
m
m2 <- matrix(12:23, nrow=4, ncol=3)
m2
# Devuelve la dimension de una matriz
dim(m)
# Transpone una matriz
t(m)
# Multiplicacion entre matrices
m %*% m2
mi_lista <- list("elemento1", "elemento2", 3, 4)
mi_lista
# Extrayendo el primer elemento
mi_lista[1]
length(mi_lista)
# Borrando el elemento 2 de mi_lista
mi_lista[[2]] <- NULL # es equivalente a mi_lista[-2]
mi_lista
# Lista vacia
lista_de_listas <- list()
lista_de_listas <- vector("list", length = 5)
# Creando lista de 5 listas con 5 elementos
for (j in 1:5){
lista_de_listas[[j]] <- c(12,34,654,76,23)
}
lista_de_listas
# Primera lista
lista_de_listas[[1]]
# Extrayendo el segundo elemento de la tercera lista
lista_de_listas[[3]][2]
m2 <- matrix(12:23, nrow=4, ncol=3)
m2
# Devuelve la primera fila
m2[1,]
rowSum(m2)
rowSums(m2)
colMeans(m2)
cuadrado <- function(x){
resultado <- x^2
return(resultado)
}
cuadrado(4)
df <- data.frame(
Nombre = c("Jorge", "Marta", "Carlos"),
Edad = c(23, 35, 18),
Puntuacion = c(10, 6, 5)
)
df
df <- data.frame(
Nombre = c("Jorge", "Marta", "Carlos"),
Edad = c(23, 35, 18),
Puntos = c(10, 6, 5)
)
df
# Seleccionando la columna edad del dataframe
df[df$Edad]
# Seleccionando la columna edad del dataframe
df$Edad
# Seleccionando la columna edad del dataframe
df[df$Edad>18]
# Seleccionando la columna edad del dataframe
df[df$Edad>19]
# Seleccionando la columna edad del dataframe
df[df$Edad>19,]
# Calculando la media
mean(df$Edad)
# Asignandole 1 a la variable a
a<-1
# Imprimir a
print(a) # o simplemente a
# Imprimir un numero con un caracter usando paste
print(paste("Cantidad de personas:", a))
cuadrado <- function(x){
resultado <- x^2
return(resultado)
}
cuadrado(4)
library(stats)
3*5+2
234 > 243
"manzana" == "MANZANA"
edad <- c(12, 35, 46, 2)
edad > 20
# Al usar &, si uno de los valores es FALSE, devuelve FALSE
# Como 234 es menor que 243, devuelve FALSE
234 & 2000 > 243
# Al usar |, si uno de los valores es TRUE, devuelve TRUE
# Como 2000 es mayor que 243, devuelve TRUE
234 | 2000 > 243
# Creando un numero complejo
z_1 <- complex(real=14, imaginary=7)
z_1
typeof(1.5)
# Convirtiendo la variable b en una cadena de texto
b<-456 # integer
b<-as.character(b)
typeof(b)
# Como b es un texto, devuelve el resultado entre comillas
b
c <- "abuela"
c <- as.integer(c)
# Verificando si 432 es una cadena de texto.
is.character(432)
# El siguiente codigo imprimira en pantalla Par si el modulo entre el numero y 2 es cero, o impar si no lo es
n <- 1:6
ifelse(n%%2==0,"Par", "Impar")
dado<-1:6
for (cara in dado){
d<-dado^2
}
d
num <- 1
while (num <10){
print(num^2)
num <- num+1
}
auto <- 1
while (auto <10){
print(paste("El numero de autos es", auto))
auto <- auto + 1
}
auto <- 1
bus <- 1
while (num <10){
# Detiene el while cuando la suma de auto y bus es 8
if(auto + bus == 8){
break
}
print(paste("El numero de autos es", auto))
print(paste("El numero de buses es", bus))
bus <- bus + 1
auto <- auto + 1
}
valor<-0
repeat{
valor<-valor+1
if (valor ==5){
break
}
}
# Imprime el resultado
valor
lista <- list(pop = 1868,
numeros = c(1,2,4,6,32,575,121,5))
# lapply
lapply(lista, class)
# lapply
nombres <- c("Roberto", " Marta", "Matias", "Ignacio")
# devuelve el numero de letras de cada nombre
lapply(nombres, nchar)
# Creando un dataframe
df_ejemplo <- data.frame(
col_1 = c(1, 2, 3),
col_2 = c(4, 5, 6),
col_3 = c(7, 8, 9)
)
# Aplicando el promedio (mean) a cada columna del dataframe
medias <- lapply(df_ejemplo, mean)
medias
unlist(lapply(nombres, nchar))
sapply(nombres, nchar)
# Creando un vector numerico
v1<-c(1,2,3,4,5,6,7)
v1
# Vector numerico del 2 al 20
v2<-c(2:20)
v2
# Creando un vector de caracteres
v3 <- c("r", "a", "j")
v3
# Creando un vector logico
v4 <- c(TRUE, FALSE, FALSE, TRUE)
v4
# Vector
x<-c(3,4,5,4,3,2)
x
# Verifica si un vector es vector. Si es vector, devuelve TRUE
is.vector(x)
# Imprime el largo del vector
length(x)
# Imprime el tipo de vector
typeof(x)
# Imprime el tipo de dato
class(x)
# Nombra los elementos de un vector
names(x)<-c("a","b","c","d","e","f")
x
v5<-c(2,4,6,8)
v6<-c(1,3,5,7)
# 1.
v5*2
v6+2
# 2.
v6==3
# 3. Devuelve las posiciones de los valores que estan por sobre la media de v6
which (v6>=(mean(v6)))
# 4. Devuelve los valores que estan por sobre la media de v6
mayor_media <- which (v6>=(mean(v6)))
v6[mayor_media]
# 5. Reemplaza un valor en el vector (el 8 por el 234)
v5[4] = 234
v5
# 6. Repite tesis y agrega elementos de v6
paste("Tesis", v6)
v5
# Imprime el valor de la posicion 4 del vector v3
v5[c(4)] # o v5[4]
# Entrega un rango de valores del vector v3
v5[1:3]
# Elimina el valor de la posicion 1 (elimina el 2)
v5[-1]
# Elimina un rango de valores (elimina el 4 y 6)
v5[-1:-3]
# Sucesion que inicia en 1 y va de 2 en 2 hasta 20
seq(1,20,by=2)
# Sucesion que inicia en 3 y termina en 16
seq(3:16)
# Repite el 12 cinco veces
rep(12, 5)
# Repita casa 2 veces
rep("casa", 2)
# Repite la secuencia del 1 al 5 3 veces
rep(1:5, 3)
# Comprueba si todos los elementos son mayores a 5
y<-1:20
all(y>5)
# Comprueba si hay al menos un elemento menor a 5
x<-1:10
any(x<5)
# Creando una matriz de datos NA
z<-matrix(nrow=4,ncol=3)
z
z1<-matrix(1:6, nrow=2, ncol=3)
z1
# Vectores
vec1 <- 1:4
vec2 <- 5:8
# cbind usa cada vector como una columna
vec3 <- cbind(vec1, vec2)
vec3
# rbind usa cada vector como una fila
vec3 <- rbind(vec1, vec2)
vec3
rownames(z1) <- c("Fila_1", "Fila_2")
z1
colnames(z1) <- c("Col_1", "Col_2", "Col_3")
z1
m <- matrix(1:12, nrow=3, ncol=4)
m
m2 <- matrix(12:23, nrow=4, ncol=3)
m2
# Devuelve la primera fila
m2[1,]
# Devuelve la dimension de una matriz
dim(m)
# Transpone una matriz
t(m)
# Multiplicacion entre matrices
m %*% m2
# Calcula la suma de los valores de cada fila
rowSums(m2)
# Calcula la media de las columnas
colMeans(m2)
mi_lista <- list("elemento1", "elemento2", 3, 4)
mi_lista
# Extrayendo el primer elemento
mi_lista[1]
length(mi_lista)
# Borrando el elemento 2 de mi_lista
mi_lista[[2]] <- NULL # es equivalente a mi_lista[-2]
mi_lista
# Lista vacia
lista_de_listas <- list()
lista_de_listas <- vector("list", length = 5)
# Creando lista de 5 listas con 5 elementos
for (j in 1:5){
lista_de_listas[[j]] <- c(12,34,654,76,23)
}
lista_de_listas
# Primera lista
lista_de_listas[[1]]
# Extrayendo el segundo elemento de la tercera lista
lista_de_listas[[3]][2]
df <- data.frame(
Nombre = c("Jorge", "Marta", "Carlos"),
Edad = c(23, 35, 18),
Puntos = c(10, 6, 5)
)
df
# Seleccionando la columna edad del dataframe
df$Edad
# Seleccionando los datos que tienen una edad mayor a 19
df[df$Edad>19,]
# Calculando la media
mean(df$Edad)
